// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommonServiceClient is the client API for CommonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonServiceClient interface {
	ListPersonalities(ctx context.Context, in *ListPersonalitiesRequest, opts ...grpc.CallOption) (*ListPersonalitiesResponse, error)
	ListJobPositions(ctx context.Context, in *ListJobPositionsRequest, opts ...grpc.CallOption) (*ListJobPositionsResponse, error)
}

type commonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonServiceClient(cc grpc.ClientConnInterface) CommonServiceClient {
	return &commonServiceClient{cc}
}

func (c *commonServiceClient) ListPersonalities(ctx context.Context, in *ListPersonalitiesRequest, opts ...grpc.CallOption) (*ListPersonalitiesResponse, error) {
	out := new(ListPersonalitiesResponse)
	err := c.cc.Invoke(ctx, "/api.CommonService/ListPersonalities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonServiceClient) ListJobPositions(ctx context.Context, in *ListJobPositionsRequest, opts ...grpc.CallOption) (*ListJobPositionsResponse, error) {
	out := new(ListJobPositionsResponse)
	err := c.cc.Invoke(ctx, "/api.CommonService/ListJobPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonServiceServer is the server API for CommonService service.
// All implementations must embed UnimplementedCommonServiceServer
// for forward compatibility
type CommonServiceServer interface {
	ListPersonalities(context.Context, *ListPersonalitiesRequest) (*ListPersonalitiesResponse, error)
	ListJobPositions(context.Context, *ListJobPositionsRequest) (*ListJobPositionsResponse, error)
	mustEmbedUnimplementedCommonServiceServer()
}

// UnimplementedCommonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommonServiceServer struct {
}

func (UnimplementedCommonServiceServer) ListPersonalities(context.Context, *ListPersonalitiesRequest) (*ListPersonalitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonalities not implemented")
}
func (UnimplementedCommonServiceServer) ListJobPositions(context.Context, *ListJobPositionsRequest) (*ListJobPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobPositions not implemented")
}
func (UnimplementedCommonServiceServer) mustEmbedUnimplementedCommonServiceServer() {}

// UnsafeCommonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonServiceServer will
// result in compilation errors.
type UnsafeCommonServiceServer interface {
	mustEmbedUnimplementedCommonServiceServer()
}

func RegisterCommonServiceServer(s grpc.ServiceRegistrar, srv CommonServiceServer) {
	s.RegisterService(&CommonService_ServiceDesc, srv)
}

func _CommonService_ListPersonalities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonalitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).ListPersonalities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CommonService/ListPersonalities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).ListPersonalities(ctx, req.(*ListPersonalitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonService_ListJobPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServiceServer).ListJobPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CommonService/ListJobPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServiceServer).ListJobPositions(ctx, req.(*ListJobPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonService_ServiceDesc is the grpc.ServiceDesc for CommonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CommonService",
	HandlerType: (*CommonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPersonalities",
			Handler:    _CommonService_ListPersonalities_Handler,
		},
		{
			MethodName: "ListJobPositions",
			Handler:    _CommonService_ListJobPositions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/api.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/api.AuthService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/api.AuthService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*LoginResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AuthService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AuthService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Profile(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	Update(ctx context.Context, in *EditableData, opts ...grpc.CallOption) (*MessageResponse, error)
	Delete(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Profile(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *EditableData, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Delete(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Profile(context.Context, *UserRequest) (*ProfileResponse, error)
	Update(context.Context, *EditableData) (*MessageResponse, error)
	Delete(context.Context, *UserRequest) (*MessageResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*MessageResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Profile(context.Context, *UserRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedUserServiceServer) Update(context.Context, *EditableData) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserServiceServer) Delete(context.Context, *UserRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Profile(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditableData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*EditableData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Delete(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _UserService_Profile_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserService_Delete_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}

// LogbookServiceClient is the client API for LogbookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogbookServiceClient interface {
	Create(ctx context.Context, in *CreateLogbookRequest, opts ...grpc.CallOption) (*LogbookResponseMessage, error)
	List(ctx context.Context, in *ListLogbookRequest, opts ...grpc.CallOption) (*ListLogbookResponse, error)
	Update(ctx context.Context, in *UpdateLogbookRequest, opts ...grpc.CallOption) (*LogbookResponseMessage, error)
	Delete(ctx context.Context, in *DeleteLogbookRequest, opts ...grpc.CallOption) (*LogbookResponseMessage, error)
}

type logbookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogbookServiceClient(cc grpc.ClientConnInterface) LogbookServiceClient {
	return &logbookServiceClient{cc}
}

func (c *logbookServiceClient) Create(ctx context.Context, in *CreateLogbookRequest, opts ...grpc.CallOption) (*LogbookResponseMessage, error) {
	out := new(LogbookResponseMessage)
	err := c.cc.Invoke(ctx, "/api.LogbookService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logbookServiceClient) List(ctx context.Context, in *ListLogbookRequest, opts ...grpc.CallOption) (*ListLogbookResponse, error) {
	out := new(ListLogbookResponse)
	err := c.cc.Invoke(ctx, "/api.LogbookService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logbookServiceClient) Update(ctx context.Context, in *UpdateLogbookRequest, opts ...grpc.CallOption) (*LogbookResponseMessage, error) {
	out := new(LogbookResponseMessage)
	err := c.cc.Invoke(ctx, "/api.LogbookService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logbookServiceClient) Delete(ctx context.Context, in *DeleteLogbookRequest, opts ...grpc.CallOption) (*LogbookResponseMessage, error) {
	out := new(LogbookResponseMessage)
	err := c.cc.Invoke(ctx, "/api.LogbookService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogbookServiceServer is the server API for LogbookService service.
// All implementations must embed UnimplementedLogbookServiceServer
// for forward compatibility
type LogbookServiceServer interface {
	Create(context.Context, *CreateLogbookRequest) (*LogbookResponseMessage, error)
	List(context.Context, *ListLogbookRequest) (*ListLogbookResponse, error)
	Update(context.Context, *UpdateLogbookRequest) (*LogbookResponseMessage, error)
	Delete(context.Context, *DeleteLogbookRequest) (*LogbookResponseMessage, error)
	mustEmbedUnimplementedLogbookServiceServer()
}

// UnimplementedLogbookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogbookServiceServer struct {
}

func (UnimplementedLogbookServiceServer) Create(context.Context, *CreateLogbookRequest) (*LogbookResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLogbookServiceServer) List(context.Context, *ListLogbookRequest) (*ListLogbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLogbookServiceServer) Update(context.Context, *UpdateLogbookRequest) (*LogbookResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLogbookServiceServer) Delete(context.Context, *DeleteLogbookRequest) (*LogbookResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLogbookServiceServer) mustEmbedUnimplementedLogbookServiceServer() {}

// UnsafeLogbookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogbookServiceServer will
// result in compilation errors.
type UnsafeLogbookServiceServer interface {
	mustEmbedUnimplementedLogbookServiceServer()
}

func RegisterLogbookServiceServer(s grpc.ServiceRegistrar, srv LogbookServiceServer) {
	s.RegisterService(&LogbookService_ServiceDesc, srv)
}

func _LogbookService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogbookServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LogbookService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogbookServiceServer).Create(ctx, req.(*CreateLogbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogbookService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogbookServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LogbookService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogbookServiceServer).List(ctx, req.(*ListLogbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogbookService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogbookServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LogbookService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogbookServiceServer).Update(ctx, req.(*UpdateLogbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogbookService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogbookServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LogbookService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogbookServiceServer).Delete(ctx, req.(*DeleteLogbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogbookService_ServiceDesc is the grpc.ServiceDesc for LogbookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogbookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.LogbookService",
	HandlerType: (*LogbookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LogbookService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LogbookService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LogbookService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LogbookService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}

// RecordPhysicalDataServiceClient is the client API for RecordPhysicalDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordPhysicalDataServiceClient interface {
	Save(ctx context.Context, in *SavePhysicalDataRequest, opts ...grpc.CallOption) (*SavePhysicalDataResponse, error)
	List(ctx context.Context, in *ListPhysicalDataRequest, opts ...grpc.CallOption) (*ListPhysicalDataResponse, error)
}

type recordPhysicalDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordPhysicalDataServiceClient(cc grpc.ClientConnInterface) RecordPhysicalDataServiceClient {
	return &recordPhysicalDataServiceClient{cc}
}

func (c *recordPhysicalDataServiceClient) Save(ctx context.Context, in *SavePhysicalDataRequest, opts ...grpc.CallOption) (*SavePhysicalDataResponse, error) {
	out := new(SavePhysicalDataResponse)
	err := c.cc.Invoke(ctx, "/api.RecordPhysicalDataService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordPhysicalDataServiceClient) List(ctx context.Context, in *ListPhysicalDataRequest, opts ...grpc.CallOption) (*ListPhysicalDataResponse, error) {
	out := new(ListPhysicalDataResponse)
	err := c.cc.Invoke(ctx, "/api.RecordPhysicalDataService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordPhysicalDataServiceServer is the server API for RecordPhysicalDataService service.
// All implementations must embed UnimplementedRecordPhysicalDataServiceServer
// for forward compatibility
type RecordPhysicalDataServiceServer interface {
	Save(context.Context, *SavePhysicalDataRequest) (*SavePhysicalDataResponse, error)
	List(context.Context, *ListPhysicalDataRequest) (*ListPhysicalDataResponse, error)
	mustEmbedUnimplementedRecordPhysicalDataServiceServer()
}

// UnimplementedRecordPhysicalDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordPhysicalDataServiceServer struct {
}

func (UnimplementedRecordPhysicalDataServiceServer) Save(context.Context, *SavePhysicalDataRequest) (*SavePhysicalDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedRecordPhysicalDataServiceServer) List(context.Context, *ListPhysicalDataRequest) (*ListPhysicalDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRecordPhysicalDataServiceServer) mustEmbedUnimplementedRecordPhysicalDataServiceServer() {
}

// UnsafeRecordPhysicalDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordPhysicalDataServiceServer will
// result in compilation errors.
type UnsafeRecordPhysicalDataServiceServer interface {
	mustEmbedUnimplementedRecordPhysicalDataServiceServer()
}

func RegisterRecordPhysicalDataServiceServer(s grpc.ServiceRegistrar, srv RecordPhysicalDataServiceServer) {
	s.RegisterService(&RecordPhysicalDataService_ServiceDesc, srv)
}

func _RecordPhysicalDataService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePhysicalDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordPhysicalDataServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RecordPhysicalDataService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordPhysicalDataServiceServer).Save(ctx, req.(*SavePhysicalDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordPhysicalDataService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhysicalDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordPhysicalDataServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RecordPhysicalDataService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordPhysicalDataServiceServer).List(ctx, req.(*ListPhysicalDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordPhysicalDataService_ServiceDesc is the grpc.ServiceDesc for RecordPhysicalDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordPhysicalDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RecordPhysicalDataService",
	HandlerType: (*RecordPhysicalDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _RecordPhysicalDataService_Save_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RecordPhysicalDataService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api.proto",
}
