syntax = "proto3";

option go_package = "api/proto";
package api;

message Personality {
    int64 id_personality = 1; 
    string personality = 2; 
    string description = 3;
}

message JobPosition {
    int64 id_job_position = 1;
    string job_position = 2;
    string description = 3;
}

message ListPersonalitiesResponse {
    repeated Personality personalities = 2;
}

message ListPersonalitiesRequest {}

message ListJobPositionsRequest {}

message ListJobPositionsResponse {
    repeated JobPosition jobPositions = 1;
}

service CommonService {
    rpc ListPersonalities (ListPersonalitiesRequest) returns (ListPersonalitiesResponse) {}
    rpc ListJobPositions (ListJobPositionsRequest) returns (ListJobPositionsResponse) {}
}

// for auth
message LoginRequest {
    string email = 1;
    string password = 2;
}

message LoginResponse {
    string token = 1;
    string refreshToken = 2;
}

message RegisterRequest {
    string email = 1;
    string fullname = 2;
    string password = 3;
    string birthdate = 4;
    string gender = 5;
    string address = 6;
    int64 id_mbti = 7;
    int64 id_job_position = 8;
}

message RegisterResponse {
    int64 userId = 1;
    string message = 2;
}

message RefreshTokenRequest {
    string refreshToken = 1;
}

service AuthService {
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc RefreshToken(RefreshTokenRequest) returns (LoginResponse);
}

// for user
message EditableData {
    string fullname = 1;
    string email = 2;
    string birthdate = 3;
    string address = 4;
    int64 id_mbti = 5;
    int64 id_job_position = 6;
}

message MessageResponse {
    int64 id_user = 1;
    string message = 2;
}

message UserRequest {}

message ProfileResponse {
    string fullname = 1;
    string email = 2;
    string gender = 3;
    string birthdate = 4;
    string address = 5;
    string personality = 6;
    string position = 7;
}


message ChangePasswordRequest {
    string old_password = 2;
    string new_password = 3;
}

service UserService {
    rpc Profile (UserRequest) returns (ProfileResponse);
    rpc Update (EditableData) returns (MessageResponse);
    rpc Delete (UserRequest) returns (MessageResponse);
    rpc ChangePassword (ChangePasswordRequest) returns (MessageResponse);
}

// for logbook
message CreateLogbookRequest {
    string logs = 2;
    string log_date = 3;
}

message ListLogbookRequest {
    string start_date = 1;
    string end_date = 2;
}

message LogbookResponse {
    int64 id_logbook = 1;
    string logs = 2;
    string log_date = 3;
}

message ListLogbookResponse {
    string start_date = 1;
    string end_date = 2;
    int32 total_records = 3;
    repeated LogbookResponse logbooks = 4;
}

message UpdateLogbookRequest {
    int64 id_logbook = 1;
    string logs = 2;
    string log_date = 3;
}

message DeleteLogbookRequest {
    int64 id_logbook = 1;
}

message LogbookResponseMessage {
    int64 id_logbook = 1;
    string message = 2;
}

service LogbookService {
    rpc Create (CreateLogbookRequest) returns (LogbookResponseMessage);
    rpc List (ListLogbookRequest) returns (ListLogbookResponse);
    rpc Update (UpdateLogbookRequest) returns (LogbookResponseMessage);
    rpc Delete (DeleteLogbookRequest) returns (LogbookResponseMessage);
}

message SavePhysicalDataRequest {
    int32 systolic_blood_pressure = 1;
    int32 diastlic_blood_pressure = 2;
    int32 heart_rate = 3;
    int32 oxygen_saturation = 4;
    float temperature = 5;
}

message SavePhysicalDataResponse {
    string id_physical_data = 1;
    string message = 2;
}

message ListPhysicalDataRequest {
    string start_date = 1;
    string end_date = 2;
}

message PhysicalDataResponse {
    int64 id_physical_data = 1;
    int32 systolic_blood_pressure = 2;
    int32 diastlic_blood_pressure = 3;
    int32 heart_rate = 4;
    int32 oxygen_saturation = 5;
    float temperature = 6;
    string created_at = 7;
}

message ListPhysicalDataResponse {
    int32 total_records = 1;
    repeated PhysicalDataResponse physical_data = 2;
}
// for physical data
service RecordPhysicalDataService {
    rpc Save (SavePhysicalDataRequest) returns (SavePhysicalDataResponse);
    rpc List (ListPhysicalDataRequest) returns (ListPhysicalDataResponse);
}